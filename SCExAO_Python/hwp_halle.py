import numpy as np
import matplotlib.style
import matplotlib as mpl
#mpl.style.use('classic')
import matplotlib.pyplot as plt

# Define data points
# data obtained using https://apps.automeris.io/wpd/

data = np.array([[650.64400293926, 0.4771392405063291], \
[661.1141150717178, 0.4822489451476793], \
[668.8704954070213, 0.48636286919831223], \
[675.1056392813296, 0.49047679324894516], \
[687.4257289996197, 0.49459071729957804], \
[699.7535211810033, 0.498915611814346], \
[713.61795474957, 0.503662447257384], \
[730.4979026192998, 0.5076708860759493], \
[742.7679263274811, 0.5104135021097047], \
[758.0611667999193, 0.5126286919831224], \
[771.8177658851748, 0.5144219409282701], \
[788.6052841977809, 0.5158987341772152], \
[805.3773975841996, 0.5169535864978904], \
[825.1842814295156, 0.5177974683544304], \
[844.9719091170977, 0.518113924050633], \
[864.7479831100392, 0.518113924050633], \
[882.9912669473446, 0.5177974683544304], \
[902.7365310879113, 0.5169535864978904], \
[922.4740927653845, 0.5158987341772152], \
[942.203951979764, 0.5146329113924051], \
[966.4898181140368, 0.51315611814346], \
[992.2776645515705, 0.5111518987341772], \
[1013.5133553007581, 0.5094641350210971], \
[1039.3089042013855, 0.5076708860759493], \
[1060.53689248748, 0.5057721518987341], \
[1090.8691921502657, 0.503240506329114], \
[1115.1358021268043, 0.5012362869198312], \
[1137.8927293369875, 0.4995485232067511], \
[1162.1670417766195, 0.4977552742616034], \
[1184.9278202183498, 0.4961729957805907], \
[1209.2059838895284, 0.49448523206751055], \
[1236.5189180196044, 0.49258649789029535], \
[1263.8453314600945, 0.49105696202531646], \
[1298.7663735109215, 0.48921097046413503], \
[1327.6120977966336, 0.48762869198312236], \
[1357.982909774888, 0.4861518987341772], \
[1382.2841808353478, 0.4850970464135021], \
[1408.1086139725762, 0.4840949367088608], \
[1430.8982766509075, 0.4833037974683544], \
[1459.7767364047677, 0.4826181434599156], \
[1485.6165744681837, 0.4820379746835443], \
[1517.5432839913549, 0.48151054852320674], \
[1547.9564595166246, 0.4811940928270042], \
[1579.894722734436, 0.4809831223628692], \
[1613.361924876337, 0.4809831223628692], \
[1643.7866540962468, 0.4809831223628692], \
[1678.7750926991437, 0.4809831223628692], \
[1709.2036731506003, 0.4810886075949367], \
[1744.2113679112308, 0.4816160337552743], \
[1777.7016774424128, 0.4822489451476793], \
[1812.7209258976839, 0.4830928270042194], \
[1844.7015526625107, 0.484042194092827], \
[1873.632004042253, 0.48478059071729956], \
[1901.056623887187, 0.4859409282700422], \
[1933.0449531151073, 0.4871012658227848], \
[1968.0796064965655, 0.4883670886075949], \
[1998.5544017265845, 0.4897383966244726], \
[2025.9867240346123, 0.49110970464135023], \
[2051.886256187004, 0.4921645569620253], \
[2080.843666187574, 0.49364135021097044], \
[2118.9400486487575, 0.49543459915611815], \
[2149.4225463418697, 0.4970168776371308], \
[2178.37995634244, 0.498493670886076], \
[2202.7698057284765, 0.4998649789029536], \
[2230.2098304995975, 0.5014472573839662], \
[2254.591977422541, 0.5026075949367089], \
[2275.931651423493, 0.5037679324894515], \
[2303.36397373152, 0.5051392405063291], \
[2332.3252349636373, 0.5067215189873417], \
[2362.8115838882964, 0.508409282700422], \
[2393.294081581409, 0.5099915611814346], \
[2423.776579274521, 0.5115738396624473], \
[2455.772610965535, 0.5129451476793249], \
[2486.258959890194, 0.5146329113924051], \
[2515.19711373303, 0.5155822784810127], \
[2544.1429700389594, 0.5167426160337553], \
[2566.98847557472, 0.5174810126582279], \
[2592.8687515693773, 0.5180084388185654]])

wavelength_read = data.T[0, :]
pathdifference_read = data.T[1, :]

# Fit polynomial through data points for a smooth curve
polynomial_degree = 10
pc = np.polyfit(wavelength_read, pathdifference_read, polynomial_degree)

wavelength = np.linspace(660, 2600, 1000)
pathdifference = pc[0]*wavelength**10 + pc[1]*wavelength**9 + pc[2]*wavelength**8 + pc[3]*wavelength**7 + pc[4]*wavelength**6 + pc[5]*wavelength**5 + pc[6]*wavelength**4 + pc[7]*wavelength**3 + pc[8]*wavelength**2 + pc[9]*wavelength + pc[10]
retardance = pathdifference*360

#Does above for custom wavelength
def HalleRetardance(Wavelength):
    Pathdifference = pc[0]*Wavelength**10 + pc[1]*Wavelength**9 + pc[2]*Wavelength**8 + pc[3]*Wavelength**7 + pc[4]*Wavelength**6 + pc[5]*Wavelength**5 + pc[6]*Wavelength**4 + pc[7]*Wavelength**3 + pc[8]*Wavelength**2 + pc[9]*Wavelength + pc[10]
    return 360 * Pathdifference


if __name__ == '__main__':

    # Define central wavelengths in Y-, J-, H- and Ks-band
    central_wavelength = np.array([1043, 1245, 1625, 2182])

    # Define HWP retardances
    Delta_hwp = np.array([184.2448919689181, 177.52028410588863, 170.67215042373138, 177.6187453166632])

    # Prepare plotting
    font_size = 10
    marker_size = 6
    mpl.rcParams['mathtext.fontset'] = 'custom'
    mpl.rcParams['mathtext.rm'] = 'Helvetica'
    mpl.rcParams['mathtext.it'] = 'Helvetica:italic'

    # Plot data
    write_directory = 'D:\\Documents\\PhD\\Projects\\IRDIS Calibration\\Paper\\figs\\'

    plt.figure(figsize = (3.9, 2.0))
    plt.plot(np.array([600, 2600]), np.array([180, 180]), 'k--', zorder = 1)
    plt.plot(wavelength, retardance, 'k-', zorder = 3)
    plt.plot(central_wavelength, Delta_hwp, 'ob', markersize = marker_size, zorder = 5)
    plt.xlabel(r'Wavelength (nm)', fontsize = font_size)
    plt.xlim([600, 2600])
    plt.xticks(np.arange(600, 2600 + 400, 400))
    plt.tick_params(axis = 'x', labelsize = font_size)
    plt.ylabel(r'$\Delta_\mathrm{HWP}$ $(^\circ)$', fontsize = 12)
    plt.ylim([169, 190])
    plt.tick_params(axis = 'y', labelsize = font_size)
    plt.text(1080, 184.5, 'Y', fontsize = 12)
    plt.text(1335, 177.1, 'J', fontsize = 12)
    plt.text(1680, 170.2, 'H', fontsize = 12)
    plt.text(2250, 177, 'K$_\mathrm{s}$', fontsize = 12)
    plt.grid()
    #plt.tight_layout()
    #plt.savefig(write_directory + 'hwp_halle.png', dpi = 300, bbox_inches='tight')
    #plt.savefig(write_directory + 'hwp_halle.pdf', bbox_inches='tight')
    plt.show()